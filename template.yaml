AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  StageName:
    Type: String
    Default: Prod

Resources:
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: hello-world/
      Handler: app.handler
      Runtime: nodejs14.x
      Events:
        ExplicitApi: # warning: creates a public endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: GET
            Path: /hello
            TimeoutInMillis: 15000
            PayloadFormatVersion: "2.0"
            RouteSettings:
              ThrottlingBurstLimit: 600

  AuthenticateUserSam:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: AuthenticateUser-Sam/
      FunctionName: "AuthenticateUser-Sam"
      Handler: index.lambdahandler
      Environment:
        Variables:
          databaseName: db
          databaseUser: admin
      Runtime: nodejs14.x
      Events:
        ExplicitApi: # warning: creates a public endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Method: POST
            Path: /auth
            TimeoutInMillis: 15000
            PayloadFormatVersion: "1.0"
            RouteSettings:
              ThrottlingBurstLimit: 600
  
  CreateUserSam:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: CreateUser-Sam/
      FunctionName: "CreateUser-Sam"
      Handler: index.lambdahandler
      Environment:
        Variables:
          databaseName: mongodb
          databaseUser: admin
      Runtime: nodejs14.x
      Policy:
        Type: 'AWS::IAM::Policy'
        Properties:
          PolicyName: AmazonS3FullAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
              - Action: '"s3:*",
              "s3-object-lambda:*"'
              - Resource: '*'
      Events:
        ExplicitApi: # warning: creates a public endpoint
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: 'NONE'
            Method: POST
            Path: /create
            TimeoutInMillis: 15000
            PayloadFormatVersion: "1.0"
            RouteSettings:
              ThrottlingBurstLimit: 600

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref StageName
      Tags:
        Tag: Value
      AccessLogSettings:
        DestinationArn: !GetAtt AccessLogs.Arn
        Format: $context.requestId
      Auth:
        Authorizers:
          OAuth2Authorizer:
            JwtConfiguration:
              issuer: "https://aikyne.us.auth0.com/"
              audience:
                - https://aikyne-jwt-authorizer
            IdentitySource: "$request.header.Authorization"
        DefaultAuthorizer: OAuth2Authorizer
      DefaultRouteSettings:
        ThrottlingBurstLimit: 200
      RouteSettings:
        "GET /hello":
          ThrottlingBurstLimit: 500 # overridden in HttpApi Event
      StageVariables:
        mongoDB : "guna:WCPUfJGgOcN7HV20@gunacluster.wrvd0.mongodb.net/SocialMediaPublisher"
      FailOnWarnings: true

  AccessLogs:
    Type: AWS::Logs::LogGroup

Outputs:
  HttpApiUrl:
    Description: URL of your API endpoint
    Value:
      Fn::Sub: 'https://${HttpApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${StageName}/'
  HttpApiId:
    Description: Api id of HttpApi
    Value:
      Ref: HttpApi